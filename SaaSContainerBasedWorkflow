def gv
def emailHandle
def buildDir
def stageDir
def BUILD_AGENT='SAAS_di2inpun0050lv0_yytwint_build'
def TEST_AGENT='SAAS_di2inpun0212lv0_yytwint_test'
def STAGE_AGENT='SAAS_di2inpun0212lv0_yytwint_test'
def boolean anyFailure = false

pipeline {
    agent any
	options {
		timeout(time: 40, unit: 'MINUTES')
	}
	
	parameters {
		choice(name: 'NXRelease', choices: ['nx2312.latest', 'nx2306.latest', 'nx2212.latest'], description: 'Use the latest IP from NXVersion release to create the build.')
		string(name: 'UnitPath', defaultValue: '/apps/JenkinsBase/units/Dev', description : 'Path where build unit for the run is to be created.')
		string(name: 'StagePath', defaultValue: '/apps/JenkinsBase/stage/Dev', description : 'Path where translator worker kits are to be staged.')
		booleanParam(name: 'HC', defaultValue: false, description : 'Enable horizontal collaboration change package ')
		string(name: 'CPNumber', defaultValue: '0', description : 'CP number on top of NXRelease against which build and test steps to be executed.')
		booleanParam(name: 'Deploy', defaultValue: false, description : 'Deploy staging directory contents to customer setup')
	}
    stages {
		stage ('Init'){
			steps {
				script{
					gv = load "ContainerBasedWorkflow.groovy"
					emailHandle = load "email.groovy"
					buildDir="${params.UnitPath}/${params.NXRelease}_TranslatorWorker_${BUILD_TIMESTAMP}"
					stageDir="${params.StagePath}/${params.NXRelease}_TranslatorWorker_${BUILD_TIMESTAMP}"
					NXReleaseVersion="${params.NXRelease}"
					HCFlag="${params.HC}"
				}
			}
		}
		
		stage('CreateUnit') {
            agent { label "${BUILD_AGENT}" }
            steps {
				script{
					def CP="${params.CPNumber}"
					if (("${HCFlag}"=="false") || (("${HCFlag}"=="true") && ("${CP}"!="0"))){
						gv.CreateUnit(buildDir) 
						echo 'linux create'
						BUILD_PROCESS_FLAG=true
					}
					else {
						error "you have selected HC option but CP number is not specified correctly so skipping Group build and testing!"
						BUILD_PROCESS_FLAG=false						
					}
				}					
            }
        }
        stage('BuildUnit') {
            agent { label "${BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					gv.BuildUnit(buildDir) 
				}					
            }
        }
		stage('TestUnit') {
            agent { label "${TEST_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					gv.TestUnit(buildDir) 
				}					
            }
        }
		stage('StageForContainer') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					gv.StageForContainer(buildDir,stageDir) 
				}					
            }
        }
		stage('CheckLicenseServer') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					gv.CheckLicenseServer() 
				}					
            }
        }
		stage('RemoveRunningContainers-Pre') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
				script{
					gv.RemoveRunningContainers() 
				}					
            }
        }
		stage('BuildAndRunDocker') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {					
				script{
					try{
						gv.BuildAndRunDocker(buildDir,stageDir) 
					}
					catch (Exception e) {
						echo 'Exception occurred: ' + e.toString()
						anyFailure = true
					}
				}			
            }
        }
		stage('DockerCleanup') {
            agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
            steps {
					catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
					script{
						gv.DockerCleanup(stageDir) 
					}
				}				
            }
        }	
		stage('RemoveRunningContainers-Post') {
			agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
			steps {
				script{
					gv.RemoveRunningContainers() 
				}					
			}
		}
		stage('DeployContainer') {
			agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
			steps {
				script{
					gv.DeployContainer(buildDir,stageDir) 
				}					
			}
		}			
				
		stage('Purge Unit') {
			agent { label "${BUILD_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
			steps {
				script{
					if( anyFailure == false ) {
						gv.Purge("${params.UnitPath}") 
					}
					else {
						echo "Skipping Purge Unit due to earlier failure"
					}
				}					
			}
		}

		stage('Purge Stage') {
			agent { label "${STAGE_AGENT}" }
			when {
					expression { "${BUILD_PROCESS_FLAG}"=="true" }
				}
			steps {
				script{
					if( anyFailure == false ) {
						gv.Purge("${params.StagePath}") 
					}
					else {
						echo "Skipping Purge Stage due to earlier failure"
					}
				}					
			}
		}
		
		stage('Evaluate Status') {
			steps{
				script {
					if( anyFailure == true ) {
						currentBuild.result = 'FAILURE'
						currentBuild.buildResult = 'FAILURE'
					}
				}
			}
		}
    }
	

	
    post {
		
        success {
            echo 'All tasks completed successfully.'
        }
		failure {
			echo 'One or more stages have failed.'
		}	
		always{
			script{
				echo 'echo statement.'	
				emailHandle.sendEmail(buildDir,stageDir)
			}
		}
    }
}
